
ELEDICE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000348  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000348  000003bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006bc  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000555  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031f  00000000  00000000  0000106d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  0000138c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034e  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003ab  00000000  00000000  00001782  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001b2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	62 c0       	rjmp	.+196    	; 0xd6 <__vector_8>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e8 e4       	ldi	r30, 0x48	; 72
  32:	f3 e0       	ldi	r31, 0x03	; 3
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a4 36       	cpi	r26, 0x64	; 100
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>
  40:	02 d0       	rcall	.+4      	; 0x46 <main>
  42:	80 c1       	rjmp	.+768    	; 0x344 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <main>:


int main(void)
{
	/* Replace with your application code */
	DDRB = 0xFF;
  46:	8f ef       	ldi	r24, 0xFF	; 255
  48:	87 bb       	out	0x17, r24	; 23
	PORTB = 0xFF;
  4a:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  4c:	2f e7       	ldi	r18, 0x7F	; 127
  4e:	8a e1       	ldi	r24, 0x1A	; 26
  50:	96 e0       	ldi	r25, 0x06	; 6
  52:	21 50       	subi	r18, 0x01	; 1
  54:	80 40       	sbci	r24, 0x00	; 0
  56:	90 40       	sbci	r25, 0x00	; 0
  58:	e1 f7       	brne	.-8      	; 0x52 <main+0xc>
  5a:	00 c0       	rjmp	.+0      	; 0x5c <main+0x16>
  5c:	00 00       	nop
	
	_delay_ms(2000);
	DDRB = 0b111011;
  5e:	8b e3       	ldi	r24, 0x3B	; 59
  60:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
  62:	18 ba       	out	0x18, r1	; 24
	(1 << ADEN)|	//ADC Enable
	(1 << ADSC)|	//ADC start
	(1 << ADATE)|	//ADC auto Trigger Enable
	(1 << ADIF)|	//ADC Interrupt Flag
	(1 << ADIE)|	//ADC Interrupt
	(0b000 <<ADPS0);	//ADC Clock
  64:	88 ef       	ldi	r24, 0xF8	; 248
  66:	86 b9       	out	0x06, r24	; 6
	ADCSRB = (0b000 << ADTS0);	//ADC sampling in Continuity
  68:	13 b8       	out	0x03, r1	; 3
	ADMUX =
	(0b00 << REFS0)|	//内部VCC電源参照
	(0 << ADLAR)|	//右詰め
	(0b0001 << MUX0);	//ADC1を参照
  6a:	81 e0       	ldi	r24, 0x01	; 1
  6c:	87 b9       	out	0x07, r24	; 7
	DIDR0 = (1 << ADC1D);	//Enable ADC on ADC1
  6e:	84 e0       	ldi	r24, 0x04	; 4
  70:	84 bb       	out	0x14, r24	; 20
	
	sei();
  72:	78 94       	sei
	set_sleep_mode(SLEEP_MODE_IDLE);
  74:	85 b7       	in	r24, 0x35	; 53
  76:	87 7e       	andi	r24, 0xE7	; 231
  78:	85 bf       	out	0x35, r24	; 53
	while (1)
	{
		sleep_mode();
  7a:	85 b7       	in	r24, 0x35	; 53
  7c:	80 62       	ori	r24, 0x20	; 32
  7e:	85 bf       	out	0x35, r24	; 53
  80:	88 95       	sleep
  82:	85 b7       	in	r24, 0x35	; 53
  84:	8f 7d       	andi	r24, 0xDF	; 223
  86:	85 bf       	out	0x35, r24	; 53
  88:	f8 cf       	rjmp	.-16     	; 0x7a <main+0x34>

0000008a <_Z12Display_Dicei>:
}


int Display_Dice(int num)
{
	switch(num)
  8a:	82 30       	cpi	r24, 0x02	; 2
  8c:	91 05       	cpc	r25, r1
  8e:	99 f0       	breq	.+38     	; 0xb6 <_Z12Display_Dicei+0x2c>
  90:	2c f4       	brge	.+10     	; 0x9c <_Z12Display_Dicei+0x12>
  92:	00 97       	sbiw	r24, 0x00	; 0
  94:	51 f0       	breq	.+20     	; 0xaa <_Z12Display_Dicei+0x20>
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	59 f0       	breq	.+22     	; 0xb0 <_Z12Display_Dicei+0x26>
  9a:	19 c0       	rjmp	.+50     	; 0xce <_Z12Display_Dicei+0x44>
  9c:	84 30       	cpi	r24, 0x04	; 4
  9e:	91 05       	cpc	r25, r1
  a0:	81 f0       	breq	.+32     	; 0xc2 <_Z12Display_Dicei+0x38>
  a2:	64 f0       	brlt	.+24     	; 0xbc <_Z12Display_Dicei+0x32>
  a4:	05 97       	sbiw	r24, 0x05	; 5
  a6:	81 f0       	breq	.+32     	; 0xc8 <_Z12Display_Dicei+0x3e>
  a8:	12 c0       	rjmp	.+36     	; 0xce <_Z12Display_Dicei+0x44>
	{
		case 0: PORTB = DICE1; break;
  aa:	88 e0       	ldi	r24, 0x08	; 8
  ac:	88 bb       	out	0x18, r24	; 24
  ae:	10 c0       	rjmp	.+32     	; 0xd0 <_Z12Display_Dicei+0x46>
		case 1: PORTB = DICE2; break;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	88 bb       	out	0x18, r24	; 24
  b4:	0d c0       	rjmp	.+26     	; 0xd0 <_Z12Display_Dicei+0x46>
		case 2: PORTB = DICE3; break;
  b6:	88 e1       	ldi	r24, 0x18	; 24
  b8:	88 bb       	out	0x18, r24	; 24
  ba:	0a c0       	rjmp	.+20     	; 0xd0 <_Z12Display_Dicei+0x46>
		case 3: PORTB = DICE4; break;
  bc:	81 e1       	ldi	r24, 0x11	; 17
  be:	88 bb       	out	0x18, r24	; 24
  c0:	07 c0       	rjmp	.+14     	; 0xd0 <_Z12Display_Dicei+0x46>
		case 4: PORTB = DICE5; break;
  c2:	89 e1       	ldi	r24, 0x19	; 25
  c4:	88 bb       	out	0x18, r24	; 24
  c6:	04 c0       	rjmp	.+8      	; 0xd0 <_Z12Display_Dicei+0x46>
		case 5: PORTB = DICE6; break;
  c8:	83 e1       	ldi	r24, 0x13	; 19
  ca:	88 bb       	out	0x18, r24	; 24
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <_Z12Display_Dicei+0x46>
		default: PORTB = DICEOFF; break;
  ce:	18 ba       	out	0x18, r1	; 24
	}
	return 0;
}
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	08 95       	ret

000000d6 <__vector_8>:
#define DICEOFF 0b000000

int Display_Dice(int num);

ISR(ADC_vect)
{
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	ef 92       	push	r14
  e2:	ff 92       	push	r15
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	2f 93       	push	r18
  ea:	3f 93       	push	r19
  ec:	4f 93       	push	r20
  ee:	5f 93       	push	r21
  f0:	6f 93       	push	r22
  f2:	7f 93       	push	r23
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
  f8:	af 93       	push	r26
  fa:	bf 93       	push	r27
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	ef 93       	push	r30
 102:	ff 93       	push	r31
	int adc = ADC;
 104:	84 b1       	in	r24, 0x04	; 4
 106:	95 b1       	in	r25, 0x05	; 5
	if(adc < 256) return;
 108:	8f 3f       	cpi	r24, 0xFF	; 255
 10a:	91 05       	cpc	r25, r1
 10c:	69 f1       	breq	.+90     	; 0x168 <__vector_8+0x92>
 10e:	64 f1       	brlt	.+88     	; 0x168 <__vector_8+0x92>
 110:	c4 e1       	ldi	r28, 0x14	; 20
 112:	d0 e0       	ldi	r29, 0x00	; 0
	
	for(int cnt = 0;cnt < 20;cnt++)
	{
		int ran = -1;
		int r = rand() % 6;
 114:	06 e0       	ldi	r16, 0x06	; 6
 116:	10 e0       	ldi	r17, 0x00	; 0
		if(ran == r)
		{
			r= (r + 3) % 6;
 118:	68 94       	set
 11a:	ee 24       	eor	r14, r14
 11c:	e1 f8       	bld	r14, 1
 11e:	f1 2c       	mov	r15, r1
	if(adc < 256) return;
	
	for(int cnt = 0;cnt < 20;cnt++)
	{
		int ran = -1;
		int r = rand() % 6;
 120:	ab d0       	rcall	.+342    	; 0x278 <rand>
 122:	b8 01       	movw	r22, r16
 124:	38 d0       	rcall	.+112    	; 0x196 <__divmodhi4>
		if(ran == r)
 126:	8f 3f       	cpi	r24, 0xFF	; 255
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	92 07       	cpc	r25, r18
 12c:	11 f4       	brne	.+4      	; 0x132 <__vector_8+0x5c>
		{
			r= (r + 3) % 6;
 12e:	8e 2d       	mov	r24, r14
 130:	9f 2d       	mov	r25, r15
 132:	e3 ed       	ldi	r30, 0xD3	; 211
 134:	f0 e3       	ldi	r31, 0x30	; 48
 136:	31 97       	sbiw	r30, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <__vector_8+0x60>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <__vector_8+0x66>
 13c:	00 00       	nop
		}
		ran = r;
		//Display_Dice(7);	//DICE OFF
		_delay_ms(50);
		Display_Dice(ran);
 13e:	a5 df       	rcall	.-182    	; 0x8a <_Z12Display_Dicei>
 140:	8b e7       	ldi	r24, 0x7B	; 123
 142:	92 e9       	ldi	r25, 0x92	; 146
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <__vector_8+0x6e>
 148:	00 c0       	rjmp	.+0      	; 0x14a <__vector_8+0x74>
 14a:	00 00       	nop
 14c:	21 97       	sbiw	r28, 0x01	; 1
ISR(ADC_vect)
{
	int adc = ADC;
	if(adc < 256) return;
	
	for(int cnt = 0;cnt < 20;cnt++)
 14e:	41 f7       	brne	.-48     	; 0x120 <__vector_8+0x4a>
 150:	9f e5       	ldi	r25, 0x5F	; 95
 152:	ee ea       	ldi	r30, 0xAE	; 174
 154:	fa e0       	ldi	r31, 0x0A	; 10
 156:	91 50       	subi	r25, 0x01	; 1
 158:	e0 40       	sbci	r30, 0x00	; 0
 15a:	f0 40       	sbci	r31, 0x00	; 0
 15c:	e1 f7       	brne	.-8      	; 0x156 <__vector_8+0x80>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <__vector_8+0x8a>
 160:	00 00       	nop
		_delay_ms(50);
		Display_Dice(ran);
		_delay_ms(150);
	}
	_delay_ms(3500);
	Display_Dice(7);
 162:	87 e0       	ldi	r24, 0x07	; 7
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	91 df       	rcall	.-222    	; 0x8a <_Z12Display_Dicei>
}
 168:	ff 91       	pop	r31
 16a:	ef 91       	pop	r30
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	bf 91       	pop	r27
 172:	af 91       	pop	r26
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	7f 91       	pop	r23
 17a:	6f 91       	pop	r22
 17c:	5f 91       	pop	r21
 17e:	4f 91       	pop	r20
 180:	3f 91       	pop	r19
 182:	2f 91       	pop	r18
 184:	1f 91       	pop	r17
 186:	0f 91       	pop	r16
 188:	ff 90       	pop	r15
 18a:	ef 90       	pop	r14
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <__divmodhi4>:
 196:	97 fb       	bst	r25, 7
 198:	07 2e       	mov	r0, r23
 19a:	16 f4       	brtc	.+4      	; 0x1a0 <__divmodhi4+0xa>
 19c:	00 94       	com	r0
 19e:	06 d0       	rcall	.+12     	; 0x1ac <__divmodhi4_neg1>
 1a0:	77 fd       	sbrc	r23, 7
 1a2:	08 d0       	rcall	.+16     	; 0x1b4 <__divmodhi4_neg2>
 1a4:	0b d0       	rcall	.+22     	; 0x1bc <__udivmodhi4>
 1a6:	07 fc       	sbrc	r0, 7
 1a8:	05 d0       	rcall	.+10     	; 0x1b4 <__divmodhi4_neg2>
 1aa:	3e f4       	brtc	.+14     	; 0x1ba <__divmodhi4_exit>

000001ac <__divmodhi4_neg1>:
 1ac:	90 95       	com	r25
 1ae:	81 95       	neg	r24
 1b0:	9f 4f       	sbci	r25, 0xFF	; 255
 1b2:	08 95       	ret

000001b4 <__divmodhi4_neg2>:
 1b4:	70 95       	com	r23
 1b6:	61 95       	neg	r22
 1b8:	7f 4f       	sbci	r23, 0xFF	; 255

000001ba <__divmodhi4_exit>:
 1ba:	08 95       	ret

000001bc <__udivmodhi4>:
 1bc:	aa 1b       	sub	r26, r26
 1be:	bb 1b       	sub	r27, r27
 1c0:	51 e1       	ldi	r21, 0x11	; 17
 1c2:	07 c0       	rjmp	.+14     	; 0x1d2 <__udivmodhi4_ep>

000001c4 <__udivmodhi4_loop>:
 1c4:	aa 1f       	adc	r26, r26
 1c6:	bb 1f       	adc	r27, r27
 1c8:	a6 17       	cp	r26, r22
 1ca:	b7 07       	cpc	r27, r23
 1cc:	10 f0       	brcs	.+4      	; 0x1d2 <__udivmodhi4_ep>
 1ce:	a6 1b       	sub	r26, r22
 1d0:	b7 0b       	sbc	r27, r23

000001d2 <__udivmodhi4_ep>:
 1d2:	88 1f       	adc	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	5a 95       	dec	r21
 1d8:	a9 f7       	brne	.-22     	; 0x1c4 <__udivmodhi4_loop>
 1da:	80 95       	com	r24
 1dc:	90 95       	com	r25
 1de:	bc 01       	movw	r22, r24
 1e0:	cd 01       	movw	r24, r26
 1e2:	08 95       	ret

000001e4 <do_rand>:
 1e4:	8f 92       	push	r8
 1e6:	9f 92       	push	r9
 1e8:	af 92       	push	r10
 1ea:	bf 92       	push	r11
 1ec:	cf 92       	push	r12
 1ee:	df 92       	push	r13
 1f0:	ef 92       	push	r14
 1f2:	ff 92       	push	r15
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	ec 01       	movw	r28, r24
 1fa:	68 81       	ld	r22, Y
 1fc:	79 81       	ldd	r23, Y+1	; 0x01
 1fe:	8a 81       	ldd	r24, Y+2	; 0x02
 200:	9b 81       	ldd	r25, Y+3	; 0x03
 202:	61 15       	cp	r22, r1
 204:	71 05       	cpc	r23, r1
 206:	81 05       	cpc	r24, r1
 208:	91 05       	cpc	r25, r1
 20a:	21 f4       	brne	.+8      	; 0x214 <do_rand+0x30>
 20c:	64 e2       	ldi	r22, 0x24	; 36
 20e:	79 ed       	ldi	r23, 0xD9	; 217
 210:	8b e5       	ldi	r24, 0x5B	; 91
 212:	97 e0       	ldi	r25, 0x07	; 7
 214:	2d e1       	ldi	r18, 0x1D	; 29
 216:	33 ef       	ldi	r19, 0xF3	; 243
 218:	41 e0       	ldi	r20, 0x01	; 1
 21a:	50 e0       	ldi	r21, 0x00	; 0
 21c:	55 d0       	rcall	.+170    	; 0x2c8 <__divmodsi4>
 21e:	49 01       	movw	r8, r18
 220:	5a 01       	movw	r10, r20
 222:	27 ea       	ldi	r18, 0xA7	; 167
 224:	31 e4       	ldi	r19, 0x41	; 65
 226:	40 e0       	ldi	r20, 0x00	; 0
 228:	50 e0       	ldi	r21, 0x00	; 0
 22a:	35 d0       	rcall	.+106    	; 0x296 <__mulsi3>
 22c:	6b 01       	movw	r12, r22
 22e:	7c 01       	movw	r14, r24
 230:	2c ee       	ldi	r18, 0xEC	; 236
 232:	34 ef       	ldi	r19, 0xF4	; 244
 234:	4f ef       	ldi	r20, 0xFF	; 255
 236:	5f ef       	ldi	r21, 0xFF	; 255
 238:	c5 01       	movw	r24, r10
 23a:	b4 01       	movw	r22, r8
 23c:	2c d0       	rcall	.+88     	; 0x296 <__mulsi3>
 23e:	dc 01       	movw	r26, r24
 240:	cb 01       	movw	r24, r22
 242:	8c 0d       	add	r24, r12
 244:	9d 1d       	adc	r25, r13
 246:	ae 1d       	adc	r26, r14
 248:	bf 1d       	adc	r27, r15
 24a:	b7 ff       	sbrs	r27, 7
 24c:	03 c0       	rjmp	.+6      	; 0x254 <do_rand+0x70>
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	a1 09       	sbc	r26, r1
 252:	b0 48       	sbci	r27, 0x80	; 128
 254:	88 83       	st	Y, r24
 256:	99 83       	std	Y+1, r25	; 0x01
 258:	aa 83       	std	Y+2, r26	; 0x02
 25a:	bb 83       	std	Y+3, r27	; 0x03
 25c:	9f 77       	andi	r25, 0x7F	; 127
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	ff 90       	pop	r15
 264:	ef 90       	pop	r14
 266:	df 90       	pop	r13
 268:	cf 90       	pop	r12
 26a:	bf 90       	pop	r11
 26c:	af 90       	pop	r10
 26e:	9f 90       	pop	r9
 270:	8f 90       	pop	r8
 272:	08 95       	ret

00000274 <rand_r>:
 274:	b7 df       	rcall	.-146    	; 0x1e4 <do_rand>
 276:	08 95       	ret

00000278 <rand>:
 278:	80 e6       	ldi	r24, 0x60	; 96
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	b3 df       	rcall	.-154    	; 0x1e4 <do_rand>
 27e:	08 95       	ret

00000280 <srand>:
 280:	a0 e0       	ldi	r26, 0x00	; 0
 282:	b0 e0       	ldi	r27, 0x00	; 0
 284:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 288:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
 28c:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__data_start+0x2>
 290:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__data_start+0x3>
 294:	08 95       	ret

00000296 <__mulsi3>:
 296:	ee 27       	eor	r30, r30
 298:	ff 27       	eor	r31, r31

0000029a <__mulsi3_helper>:
 29a:	aa 27       	eor	r26, r26
 29c:	bb 27       	eor	r27, r27
 29e:	08 c0       	rjmp	.+16     	; 0x2b0 <__mulsi3_helper+0x16>
 2a0:	a2 0f       	add	r26, r18
 2a2:	b3 1f       	adc	r27, r19
 2a4:	e4 1f       	adc	r30, r20
 2a6:	f5 1f       	adc	r31, r21
 2a8:	22 0f       	add	r18, r18
 2aa:	33 1f       	adc	r19, r19
 2ac:	44 1f       	adc	r20, r20
 2ae:	55 1f       	adc	r21, r21
 2b0:	96 95       	lsr	r25
 2b2:	87 95       	ror	r24
 2b4:	77 95       	ror	r23
 2b6:	67 95       	ror	r22
 2b8:	98 f3       	brcs	.-26     	; 0x2a0 <__mulsi3_helper+0x6>
 2ba:	70 40       	sbci	r23, 0x00	; 0
 2bc:	a9 f7       	brne	.-22     	; 0x2a8 <__mulsi3_helper+0xe>
 2be:	00 97       	sbiw	r24, 0x00	; 0
 2c0:	99 f7       	brne	.-26     	; 0x2a8 <__mulsi3_helper+0xe>
 2c2:	bd 01       	movw	r22, r26
 2c4:	cf 01       	movw	r24, r30
 2c6:	08 95       	ret

000002c8 <__divmodsi4>:
 2c8:	05 2e       	mov	r0, r21
 2ca:	97 fb       	bst	r25, 7
 2cc:	16 f4       	brtc	.+4      	; 0x2d2 <__divmodsi4+0xa>
 2ce:	00 94       	com	r0
 2d0:	0f d0       	rcall	.+30     	; 0x2f0 <__negsi2>
 2d2:	57 fd       	sbrc	r21, 7
 2d4:	05 d0       	rcall	.+10     	; 0x2e0 <__divmodsi4_neg2>
 2d6:	14 d0       	rcall	.+40     	; 0x300 <__udivmodsi4>
 2d8:	07 fc       	sbrc	r0, 7
 2da:	02 d0       	rcall	.+4      	; 0x2e0 <__divmodsi4_neg2>
 2dc:	46 f4       	brtc	.+16     	; 0x2ee <__divmodsi4_exit>
 2de:	08 c0       	rjmp	.+16     	; 0x2f0 <__negsi2>

000002e0 <__divmodsi4_neg2>:
 2e0:	50 95       	com	r21
 2e2:	40 95       	com	r20
 2e4:	30 95       	com	r19
 2e6:	21 95       	neg	r18
 2e8:	3f 4f       	sbci	r19, 0xFF	; 255
 2ea:	4f 4f       	sbci	r20, 0xFF	; 255
 2ec:	5f 4f       	sbci	r21, 0xFF	; 255

000002ee <__divmodsi4_exit>:
 2ee:	08 95       	ret

000002f0 <__negsi2>:
 2f0:	90 95       	com	r25
 2f2:	80 95       	com	r24
 2f4:	70 95       	com	r23
 2f6:	61 95       	neg	r22
 2f8:	7f 4f       	sbci	r23, 0xFF	; 255
 2fa:	8f 4f       	sbci	r24, 0xFF	; 255
 2fc:	9f 4f       	sbci	r25, 0xFF	; 255
 2fe:	08 95       	ret

00000300 <__udivmodsi4>:
 300:	a1 e2       	ldi	r26, 0x21	; 33
 302:	1a 2e       	mov	r1, r26
 304:	aa 1b       	sub	r26, r26
 306:	bb 1b       	sub	r27, r27
 308:	fd 01       	movw	r30, r26
 30a:	0d c0       	rjmp	.+26     	; 0x326 <__udivmodsi4_ep>

0000030c <__udivmodsi4_loop>:
 30c:	aa 1f       	adc	r26, r26
 30e:	bb 1f       	adc	r27, r27
 310:	ee 1f       	adc	r30, r30
 312:	ff 1f       	adc	r31, r31
 314:	a2 17       	cp	r26, r18
 316:	b3 07       	cpc	r27, r19
 318:	e4 07       	cpc	r30, r20
 31a:	f5 07       	cpc	r31, r21
 31c:	20 f0       	brcs	.+8      	; 0x326 <__udivmodsi4_ep>
 31e:	a2 1b       	sub	r26, r18
 320:	b3 0b       	sbc	r27, r19
 322:	e4 0b       	sbc	r30, r20
 324:	f5 0b       	sbc	r31, r21

00000326 <__udivmodsi4_ep>:
 326:	66 1f       	adc	r22, r22
 328:	77 1f       	adc	r23, r23
 32a:	88 1f       	adc	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	1a 94       	dec	r1
 330:	69 f7       	brne	.-38     	; 0x30c <__udivmodsi4_loop>
 332:	60 95       	com	r22
 334:	70 95       	com	r23
 336:	80 95       	com	r24
 338:	90 95       	com	r25
 33a:	9b 01       	movw	r18, r22
 33c:	ac 01       	movw	r20, r24
 33e:	bd 01       	movw	r22, r26
 340:	cf 01       	movw	r24, r30
 342:	08 95       	ret

00000344 <_exit>:
 344:	f8 94       	cli

00000346 <__stop_program>:
 346:	ff cf       	rjmp	.-2      	; 0x346 <__stop_program>
